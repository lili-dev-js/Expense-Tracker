# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AnalyticsInput {
  endDate: DateTime!
  startDate: DateTime!
}

type Category {
  _id: ID!
  createdAt: DateTime
  expenses: [Expense!]
  name: String!
  updatedAt: DateTime
}

type CategoryAnalytics {
  categoryAnalytics: [SumCategory!]!
  segmentDates: [DateTime!]!
}

input CreateCategoryInput {
  name: String!
}

input CreateExpenseInput {
  """Amount of the expense"""
  amount: Float!

  """Category ID for this expense"""
  category: ID!

  """Name of the expense"""
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Expense {
  _id: ID!
  amount: Float
  category: Category
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input FindAllExpensesInput {
  categoryId: String
  limit: Int = 10
  page: Int = 1
  sortBy: String = "createdAt"
  sortOrder: String = "desc"
}

type Mutation {
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createExpense(createExpenseInput: CreateExpenseInput!): Expense!
  removeCategory(id: ID!): Category!
  removeExpense(id: ID!): Expense!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateExpense(updateExpenseInput: UpdateExpenseInput!): Expense!
}

type PaginatedExpensesOutput {
  data: [Expense!]!
  pagination: PaginationMeta!
}

type PaginationMeta {
  currentPage: Int!
  limit: Int!
  totalPages: Int!
  totalRecords: Int!
}

type Query {
  categoryAnalytics(input: AnalyticsInput!): CategoryAnalytics!
  expenses(filters: FindAllExpensesInput): PaginatedExpensesOutput!
  findAllCategories: [Category!]!
  findCategory(id: ID!): Category!
  findExpense(id: ID!): Expense!
}

type SumCategory {
  categoryId: ID!
  categoryName: String!
  segments: [SumSegmentCategory!]!
}

type SumSegmentCategory {
  index: Int!
  totalAmount: Float!
}

input UpdateCategoryInput {
  _id: ID!
  name: String
}

input UpdateExpenseInput {
  _id: ID!

  """Amount of the expense"""
  amount: Float

  """Category ID for this expense"""
  category: ID

  """Name of the expense"""
  name: String
}